const { createECDH } = require('crypto')
const { assert, expect } = require('chai')

import * as ecc from 'asn1-codec/esm/ecc/index.mjs'
import * as ecdh from 'asn1-codec/esm/ecdh/api.mjs'
import { hex_to_u8 } from 'u8-utils/esm/index.js'

export const test_ecdh = test_ecdh_nodejs
export async function test_ecdh_nodejs(keyKind, curve, format) ::
  const ecdh_obj = ecdh.ecdh_generateKey(curve)[keyKind]
  const exp = ecdh.ecdh_exportKey(ecdh_obj, format)
  const rt_ecdh_obj = ecdh.ecdh_importKey(format, exp)

  //console.log @ JSON.stringify @: keyKind, curve, format, exported: exp

  ::
    assert.equal @
      0, Buffer.compare @ ecdh_obj.getPublicKey(), rt_ecdh_obj.getPublicKey()
      `Roundtrip public key mismatch for curve: ${curve} format ${format} ${keyKind}`

  if 'privateKey' === keyKind ::
    assert.equal @
      0, Buffer.compare @ ecdh_obj.getPrivateKey(), rt_ecdh_obj.getPrivateKey()
      `Roundtrip private key mismatch for curve: ${curve} format ${format} ${keyKind}`


export const validate_ecdh = validate_ecdh_nodejs
export async function validate_ecdh_nodejs({keyKind, curve, format, exported}) ::
  if 'string' === typeof exported ::
    exported = hex_to_u8(exported).buffer

  const ecdh_obj = await ecdh.ecdh_importKey @ format, exported
