import { u8_concat } from 'u8-utils/esm/buffer.js'
export * from './asn1_positive_int.jsy'

export default asn1_u8_encode
export function asn1_u8_encode(content_tree) ::
  const all_parts = []
  encode_next(content_tree)
  return u8_concat @ all_parts

  function encode_next(content_tree) ::
    if content_tree.byteLength ::
      all_parts.push(content_tree)
      return content_tree.byteLength

    const is_lst = Array.isArray(content_tree)
    const ident = is_lst ? content_tree[0] : content_tree.id
    const id = ident | 0
    let byteLength = 0

    const hdr = [id, null], hdr_idx = all_parts.length
    all_parts[hdr_idx] = hdr

    if ! Number.isInteger(ident) || 0 > ident || ident > 255 ::
      console.log @: ident, content_tree
      throw new Error @ 'Invalid ASN1 identifier'

    if 0x20 & id ::
      const parts = is_lst
        ? content_tree.slice(1)
        : content_tree.parts

      if 0 === parts.length ::
        throw new Error @ "Empty composite"

      for const p of parts ::
        byteLength += encode_next(p)

    else ::
      const content = is_lst ? content_tree[1] : content_tree.content
      all_parts.push @ content
      byteLength += content.byteLength

      if is_lst && 2 !== content_tree.length ::
        throw new Error @ "Invalid non-composite with list of parts"


    if byteLength < 128 ::
      hdr[1] = byteLength
    else ::
      let octects = 0, oct_len = byteLength
      while 0 !== oct_len ::
        hdr.push @ oct_len & 0xff
        oct_len >>>= 8
        octects ++
      hdr[1] = 0x80 | octects

    all_parts[hdr_idx] = new Uint8Array(hdr)
    byteLength += hdr.length
    return byteLength

