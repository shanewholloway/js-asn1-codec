export * from '../u8_utils.jsy' 

export function utf8_to_u8(utf8) ::
  return new TextEncoder('utf-8').encode @ utf8.normalize('NFKC')

export function u8_to_utf8(u8) ::
  return new TextDecoder('utf-8').decode @ u8

const _fromCharCode = String.fromCharCode
export function u8_to_base64(u8) ::
  if u8 instanceof ArrayBuffer ::
    u8 = new Uint8Array(u8)

  let res=''
  const len = u8.byteLength
  for let i=0; i<len; i++ ::
    res += _fromCharCode(u8[i])
  return btoa(res)

export function u8_to_base64url(u8) ::
  return u8_to_base64(u8)
    .replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '')

const _charCodeAt = ''.charCodeAt
export function base64_to_u8(str_b64) ::
  const sz = atob @ str_b64.replace(/-/g, '+').replace(/_/g, '/')
  const len = sz.length
  const res = new Uint8Array(len)
  for let i=0; i<len; i++ ::
    res[i] = _charCodeAt.call(sz, i)
  return res

